<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://freecille.github.io</id>
    <title>Gridea</title>
    <updated>2020-10-06T13:23:37.647Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://freecille.github.io"/>
    <link rel="self" href="https://freecille.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://freecille.github.io/images/avatar.png</logo>
    <icon>https://freecille.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[SQL基础命令语句]]></title>
        <id>https://freecille.github.io/post/sql-ji-chu-ming-ling-yu-ju/</id>
        <link href="https://freecille.github.io/post/sql-ji-chu-ming-ling-yu-ju/">
        </link>
        <updated>2020-10-02T07:19:25.000Z</updated>
        <content type="html"><![CDATA[<p>错误日志，data目录下，文件名hostname.err<br>
查询日志，data目录下，文件名hostname.log<br>
二进制日志，data目录下，文件名hostname-bin<br>
缓慢查询日志，data目录下，文件名hostname-slow.log</p>
<h1 id="增">增</h1>
<h2 id="插入数据">插入数据</h2>
<p>1.INSERT，插入或添加行，列自动增量时，不想给值，可以给NULL值</p>
<pre><code>INSERT INTO customers VALUES(NULL,
'pep',
'100 main Street',
'CA',
'235331',
'USA',
NULL,
NULL);
</code></pre>
<p>更安全但更繁琐的做法，将列名一一列出</p>
<pre><code>INSERT INTO customers
(cust_name,
cust_address,
cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,
cust_email) 
VALUES(NULL,
'pep',
'100 main Street',
'CA',
'235331',
'USA',
NULL,
NULL);
</code></pre>
<p>2.插入多行，每组值用逗号分隔</p>
<pre><code>INSERT INTO customers
(cust_name,
cust_address,
cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,
cust_email) 
VALUES
(NULL,'pep','100 main Street','CA','235331','USA',NULL,NULL),
(NULL,'tom','101 main Street','CA','233331','USA',NULL,NULL);
</code></pre>
<p>3.INSERT SELECT，插入检索出来的数据，将一个表的数据导入另一个表</p>
<pre><code>INSERT INTO customers
(cust_name,
cust_address,
cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,
cust_email) 
SELECT cust_name,
cust_address,
cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,
cust_email
FROM custnew;
</code></pre>
<h2 id="创建表">创建表</h2>
<p>1.基础创建</p>
<pre><code>CREATE TABLE customers(
cust_id              int               NOT NULL      AUTO_INCREMENT,
cust_name        char(50)      NOT NULL,
cust_address     char(50)      NOT NULL,
cust_city            char(50)      NOT NULL,
cust_state          char(50)      NOT NULL,
cust_zip             char(50)      NOT NULL,
cust_country      char(50)      NOT NULL,
cust_contact      char(50)      NOT NULL,
cust_email          char(50)      NOT NULL,
PRIMARY KEY (cust_id)
)ENGINE=InnoDB;
</code></pre>
<p>引擎：<br>
InnoDB      可靠的事务处理引擎，不支持全文本搜索<br>
MyISAM    支持全文搜索，不支持事务处理<br>
MEMORY   功能等同于MyISAM，但数据存于内存中速度快，适合用于临时表</p>
<h2 id="创建视图">创建视图</h2>
<p>1.创建名为productcustomers的视图，联结三表，创建视图就是为了方便检索，不必每次都进行联结</p>
<pre><code>CREATE VIEW  productcustomers AS
SELECT cust_name,cust_contact,prod_id
FROM customers,orders,orderitems
WHERE 
customers.cust_id = orders.cust_id,
AND orderitems.order_num = orders.order_num;
</code></pre>
<h2 id="创建触发器">创建触发器</h2>
<p>触发器会让语句在某个表发生更改时自动处理<br>
关于触发器运行的条件<br>
在对表执行以下语句时，将会触发触发器<br>
DELETE语句<br>
UPDATE语句<br>
INSERT语句</p>
<p>触发器要包含四个部分<br>
唯一的触发器名字<br>
触发器关联的表<br>
触发器应响应的活动<br>
触发器何时执行</p>
<p>使用CREATE TRIGGER语句创建<br>
创建名为new的触发器，AFTER INSERT表示INSERT语句成功后执行，FOR EACH ROW 表示插入每个行</p>
<pre><code>CREATE TRIGGER new AFTER INSERT ON products FOR EACH ROW SELECT 'Product added';
</code></pre>
<h1 id="删">删</h1>
<h2 id="删除数据">删除数据</h2>
<p>除非修改整个表，否则每个DELETE和UPDATE语句都要带上WHERE子句</p>
<p>1.DELETE，从表中删除特定行；从表中删除所有行（删除表的内容，DELETE不删除表）</p>
<pre><code>DELETE FROM customers
WHERE cust_id - 10006;
</code></pre>
<p>2.UPDATE，删除指定的列</p>
<p>3.TRUNCATE TABLE，高效删除表中所有行（比DELETE速度快）</p>
<h2 id="删除表">删除表</h2>
<pre><code>DROP TABLE 表名;
</code></pre>
<h2 id="删除触发器">删除触发器</h2>
<p>触发器不能更新或覆盖，只能删除重建</p>
<pre><code>DROP TRIGGER new;
</code></pre>
<h1 id="改">改</h1>
<h2 id="更新数据">更新数据</h2>
<p>1.UPDATE，分三部分组成<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mn>1</mn><mi mathvariant="normal">）</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">更</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">表</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{1）要更新的表}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;">1</span><span class="mord cjk_fallback" style="color:red;">）</span><span class="mord cjk_fallback" style="color:red;">要</span><span class="mord cjk_fallback" style="color:red;">更</span><span class="mord cjk_fallback" style="color:red;">新</span><span class="mord cjk_fallback" style="color:red;">的</span><span class="mord cjk_fallback" style="color:red;">表</span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mn>2</mn><mi mathvariant="normal">）</mi><mi mathvariant="normal">列</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">和</mi><mi mathvariant="normal">它</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">值</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{2）列名和它们的新值}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;">2</span><span class="mord cjk_fallback" style="color:red;">）</span><span class="mord cjk_fallback" style="color:red;">列</span><span class="mord cjk_fallback" style="color:red;">名</span><span class="mord cjk_fallback" style="color:red;">和</span><span class="mord cjk_fallback" style="color:red;">它</span><span class="mord cjk_fallback" style="color:red;">们</span><span class="mord cjk_fallback" style="color:red;">的</span><span class="mord cjk_fallback" style="color:red;">新</span><span class="mord cjk_fallback" style="color:red;">值</span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mn>3</mn><mi mathvariant="normal">）</mi><mi mathvariant="normal">确</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">更</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">过</mi><mi mathvariant="normal">滤</mi><mi mathvariant="normal">条</mi><mi mathvariant="normal">件</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{3）确定要更新行的过滤条件}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord" style="color:red;"><span class="mord" style="color:red;">3</span><span class="mord cjk_fallback" style="color:red;">）</span><span class="mord cjk_fallback" style="color:red;">确</span><span class="mord cjk_fallback" style="color:red;">定</span><span class="mord cjk_fallback" style="color:red;">要</span><span class="mord cjk_fallback" style="color:red;">更</span><span class="mord cjk_fallback" style="color:red;">新</span><span class="mord cjk_fallback" style="color:red;">行</span><span class="mord cjk_fallback" style="color:red;">的</span><span class="mord cjk_fallback" style="color:red;">过</span><span class="mord cjk_fallback" style="color:red;">滤</span><span class="mord cjk_fallback" style="color:red;">条</span><span class="mord cjk_fallback" style="color:red;">件</span></span></span></span></span></p>
<pre><code>UPDATE customers 
SET cust__email = 'elmer@fudd.com' 
WHERE cust_id = 10005;
</code></pre>
<p>2.更新多列，逗号分隔</p>
<pre><code>UPDATE customers 
SET
cust_name = 'The Fudds', 
cust__email = 'elmer@fudd.com' 
WHERE cust_id = 10005;
</code></pre>
<p>3.更新多行，出错不取消还原继续更新,IGNORE（iɡˈnôr忽视）</p>
<pre><code>UPDATE IGNORE customers
SET
cust_name = 'The Fudds', 
cust__email = 'elmer@fudd.com' 
WHERE cust_id = 10005;
</code></pre>
<p>4.UPDATE更新等于重新赋值，UPDATE设置值为NULL值时，可以作为删除使用</p>
<pre><code>UPDATE IGNORE customers
SET
cust__email = NULL
WHERE cust_id = 10005;
</code></pre>
<h2 id="更新表">更新表</h2>
<p>1.ALTER TABLE ,一般表存储数据，就不应该再被更新<br>
添加列</p>
<pre><code>ALTER TABLE vendors
ADD vend_phone CHAR(20);
</code></pre>
<p>删除列</p>
<pre><code>ALTER TABLE vendors
DROP vend_phone CHAR(20);
</code></pre>
<p>定义外键</p>
<h2 id="重命名表">重命名表</h2>
<pre><code>RENAME TABLE 旧表名 TO 新表名;
</code></pre>
<h2 id="更新视图">更新视图</h2>
<p>可以更新，但没必要，视图本职是用来检索而不是更新</p>
<h1 id="查">查</h1>
<h2 id="检索数据">检索数据</h2>
<h3 id="show语句">SHOW语句</h3>
<p>1)显示数据库</p>
<pre><code>SHOW DATABASES;
</code></pre>
<p>2)显示库里所有的表</p>
<pre><code>SHOW TABLES;
</code></pre>
<p>3)显示表中各个字段的详细信息</p>
<pre><code>SHOW COLUMNS FROM 表名;
</code></pre>
<p>4)显示服务器状态信息</p>
<pre><code>SHOW STATUS;
</code></pre>
<p>5)显示创建数据库或表的SQL语句</p>
<pre><code>SHOW CREATE 数据库名/表名;
</code></pre>
<p>6)显示用户的权限</p>
<pre><code>SHOW GRANTS;
</code></pre>
<p>7)显示服务器错误或警告消息</p>
<pre><code>SHOW ERRORS;
SHOW WARNINGS;
</code></pre>
<h3 id="select语句">SELECT语句</h3>
<p>1.检索信息，根据选择字段显示所需要的记录信息（字段名用英文逗号隔开，显示所有字段用星号）</p>
<pre><code>SELECT  id,name FROM stundent;
SELECT * FROM student;
</code></pre>
<p>2.检索不同的行，DISTINCT只返回不同的值</p>
<pre><code>SELECT  DISTINCT  id FROM stundet;
</code></pre>
<p>3.检索限制结果，LIMIT显示指定行数（从第五行开始，向下取五行）注：第一行为行0，第二行为行1</p>
<pre><code>SELECT  id from student LIMIT 5,5;
</code></pre>
<p>4.检索使用完全限定的表名列名</p>
<pre><code>SELECT  class.id FROM school.class;
</code></pre>
<h2 id="排序检索数据">排序检索数据</h2>
<p>1.ORDER BY取一列或多列字段进行排序</p>
<pre><code>SELECT id,name,sex FROM student ORDER BY name,sex;
</code></pre>
<p>2.默认排序为(A<sub>Z)升序排序，可使用DESC进行(Z</sub>A)降序排序。注：要想多列进行降序排序，必须每列指定DESC关键字</p>
<pre><code>SELECT id,name,sex FROM student ORDER BY name,sex DESC;
</code></pre>
<p>2.组合使用ORDER BY和LIMIT，可以取出一列的最高或最低值（取id最大的一行，LIMIT只返回一行）</p>
<pre><code>SELECT id,name,sex FROM student ORDER BY id DESC LIMIT 1;
</code></pre>
<h2 id="过滤数据">过滤数据</h2>
<h3 id="where子句">WHERE子句</h3>
<p>1.指定条件检索</p>
<pre><code>SELECT id,name,sex FROM student WHERE id = 2;
</code></pre>
<p>操作符</p>
<pre><code>=    等于
&lt;&gt; 不等于
!=  不等于
&lt;    小于
&lt;= 小于等于
&gt;    大于
&gt;=  大于等于
BETWEEN  两值之间
</code></pre>
<p>2.不匹配检查，例如：不是xxx的产品</p>
<pre><code>SELECT id,name FROM products WHERE id &lt;&gt; 2000;
</code></pre>
<p>3.范围检索，例如：id在10~20之间的产品</p>
<pre><code>SELECT id,name FROM products WHERE id BETWEEN 10 AND 20;
</code></pre>
<p>4.空值检查，例如：查询没有性别的学生</p>
<pre><code>SELECT id,name,sex FROM student WHERE sex IS NULL;
</code></pre>
<h2 id="数据过滤">数据过滤</h2>
<h3 id="组合where子句">组合WHERE子句</h3>
<p>AND子句与OR子句，AND和OR为逻辑操作符，AND代表并，OR代表或<br>
1.AND子句与WHERE子句结合，查询必须满足两者条件的数据</p>
<pre><code>SELECT id,name FROM products WHERE id &lt;&gt; 2000 AND id &gt; 1000;
</code></pre>
<p>2.OR子句与WHERE子句结合，查询时数据满足其中一个条件即可显示</p>
<pre><code>SELECT id,name FROM products WHERE id &lt;&gt; 2000 OR id &lt;&gt; 1000;
</code></pre>
<p>AND子句与OR子句可以重复使用，达到高级过滤效果<br>
3.当AND子句与OR子句同时使用时，优先处理AND逻辑操作符，要想先处理OR子句，给OR子句加上括号</p>
<pre><code>SELECT id,name FROM products WHERE (id &lt;&gt; 2000 OR id &lt;&gt; 1000) AND  id = 1500;
</code></pre>
<p>4.IN操作符，指定范围匹配查询</p>
<pre><code>SELECT stu_id,stu_name FROM student WHERE class_id IN (102,103) ORDER BY stu_id;
</code></pre>
<p>5.NOT操作符，否定之后的所有条件，列出除了102班和103班的所有学生</p>
<pre><code>SELECT stu_id,stu_name FROM student WHERE class_id NOT IN (102,103) ORDER BY stu_id;
</code></pre>
<h2 id="使用通配符过滤">使用通配符过滤</h2>
<p>1.百分号通配符（多字符匹配）,检索以&quot;li&quot;开头的名字，检索含有&quot;li&quot;的名字</p>
<pre><code>SELECT stu_id,stu_name FROM student WHERE stu_name LIKE 'li%';
SELECT stu_id,stu_name FROM student WHERE stu_name LIKE '%li%';
</code></pre>
<p>2.下划线通配符（单字符匹配），一条下划线只匹配一个字符，用途和百分号一样</p>
<pre><code>SELECT stu_id,stu_name FROM student WHERE stu_name LIKE 'li_ang';
SELECT stu_id,stu_name FROM student WHERE stu_name LIKE '%li%';
</code></pre>
<p>注：通配符不是首选的检索方式，因为它比其它检索用时更长，不能过度使用通配符</p>
<h2 id="正则表达式">正则表达式</h2>
<p>REGEXP<br>
1.基本字符匹配，检索包含&quot;1000&quot;的所有行，匹配列值查找，（LIKE是匹配整列查找）</p>
<pre><code>SELECT pro_name FROM products WHERE pro_name REGEXP '1000' ORDER BY pro_name;
</code></pre>
<p>2.OR匹配  &quot;|&quot;，匹配其中的一个即可返回</p>
<pre><code>SELECT pro_name FROM products WHERE pro_name REGEXP '1000|2000' ORDER BY pro_name;
</code></pre>
<p>3.匹配几个字符之一  &quot;[]&quot;，匹配1或2或3，与用OR匹配 &quot;|&quot;是有区别的，[]括住了查找字符，就不会查找出其他内容，比它更具有限制性</p>
<pre><code>SELECT pro_name FROM products WHERE pro_name REGEXP '[123]tom' ORDER BY pro_name;
</code></pre>
<p>4.匹配范围,例如：&quot;[1-3]&quot;，用&quot;-&quot;定义一个范围，</p>
<pre><code>SELECT pro_name FROM products WHERE pro_name REGEXP '[1-3]tom' ORDER BY pro_name;
SELECT pro_name FROM products WHERE pro_name REGEXP '[a-z]tom' ORDER BY pro_name;
SELECT pro_name FROM products WHERE pro_name REGEXP '[1-3][a-z]om' ORDER BY pro_name;
</code></pre>
<p>5.匹配特殊字符，&quot;\&quot;作为前导，例如：&quot;\-&quot;&quot;\.&quot;</p>
<pre><code>SELECT pro_name FROM products WHERE pro_name REGEXP '\\-' ORDER BY pro_name;
</code></pre>
<p>元字符</p>
<pre><code>\\f       换页
\\n      换行
\\r       回车
\\t       制表
\\v       纵向制表
</code></pre>
<p>6.匹配字符集<br>
百度<br>
7.定位符</p>
<pre><code>^         文本的开头
$          文本的结尾
[[:&lt;:]]    词的开头
[[:&gt;:]]    词的结尾
</code></pre>
<h2 id="数据处理函数">数据处理函数</h2>
<p>百度<br>
1.列别名<br>
别名用AS关键字赋予</p>
<h2 id="分组数据">分组数据</h2>
<p>1.GROUP BY子句，放在WHERE子句之后，ORDER BY子句之前</p>
<pre><code>SELECT pro_id,COUNT(*) AS num_prods FROM products GROUP BY pro_id ;
</code></pre>
<p>2.过滤分组，WHERE是过滤行不能过滤分组（可以在分组前使用），使用HAVING子句过滤分组，HAVING支持所有WHERE操作符</p>
<pre><code>SELECT pro_id,COUNT(*) AS num_prods FROM products GROUP BY pro_id 
HAVING COUNT(*) &gt;=2;
</code></pre>
<p>3.WHERE与HAVING混用</p>
<pre><code>SELECT pro_id,COUNT(*) AS num_prods FROM products WHERE pro_price &gt;=10 
GROUP BY pro_id 
HAVING COUNT(*) &gt;=2;
</code></pre>
<p>4.可以加入ORDER BY 保证数据的排序</p>
<pre><code>SELECT pro_id,COUNT(*) AS num_prods FROM products WHERE pro_price &gt;=10 
GROUP BY pro_id 
HAVING COUNT(*) &gt;=2
ORDER BY pro_price;
</code></pre>
<h2 id="子查询">子查询</h2>
<p>1.查询套查询，查询不再是硬查询，而是具有逻辑化的查询</p>
<pre><code>SELECT cust_id FROM orders WHERE order_num IN 
(SELECT order_num FROM orderitems WHERE prod_id = 'TNT2');
</code></pre>
<p>2.计算字段套子查询，为每个客户执行统计计算</p>
<pre><code>SELECT cust_name,cust_state,
(SELECT COUNT(*) FROM orders WHERE order.cust_id = custmers.cust_id)
AS orders FROM custmers ORDER BY cust_name;
</code></pre>
<p>3.相关子查询，涉及外部查询的子查询，当列名具有多义性，要使用完全限定的列名</p>
<pre><code>例如：order.cust_id = custmers.cust_id
</code></pre>
<h2 id="联结表">联结表</h2>
<p>primary key 与 foreign key （主键与外键）<br>
1.等值联结。将两表关联，根据关联字段能从另一张表找出相应的信息，用WHERE子句联结</p>
<pre><code>例如：order.cust_id = custmers.cust_id
SELECT cust_name,cust_state,
(SELECT COUNT(*) FROM orders WHERE order.cust_id = custmers.cust_id)
AS orders FROM custmers ORDER BY cust_name;
</code></pre>
<p>注：没有WHERE子句，第一个表会与第二个表的每一行进行配对，出现结果为<br>
笛卡儿积（检索出的行数是第一个表的行数乘以第二个表的行数）</p>
<p>2.内部联结。表名 INNER JOIN 表名  ON  联结条件，与WHERE效果相同，只是语法不同</p>
<pre><code>SELECT vend_name,prod_name,prod_price 
FROM vendors INNER JOIN products ON 
vendors.vend_id = products.vend_id;
</code></pre>
<p>3.联结多个表，显示编号为 20005 的订单中的物品，WHERE定义两个联结条件联结3张表，第三个联结条件过滤出订单20005中的物品</p>
<pre><code>SELECT vend_name,prod_name,prod_price,quantity
FROM orderitems, products, vendors WHERE 
vendors.vend_id = products.vend_id,
AND orderitems.prod_id = products.prod_id
AND order_num =20005;
</code></pre>
<h2 id="创建高级联结">创建高级联结</h2>
<p>1.使用表别名，AS起名，可以缩短SQL语句，表别名只在查询执行中使用，不返回客户机</p>
<pre><code>SELECT vend_name,prod_name,prod_price,quantity
FROM orderitems AS oi, products AS pr, vendors AS vd
WHERE 
vd.vend_id = pr.vend_id,
AND or.prod_id = pr.prod_id
AND order_num =20005;
</code></pre>
<p>2.自联结，字段有关系时（比如父子关系，上下级关系等）使用自联结，可以给表取别名避开二义性<br>
（二义性：MYSQL不清楚引用的是表中哪个实例）<br>
可以使用子查询达到自联结效果</p>
<pre><code>SELECT p1.prod_id,p1.prod_name FROM products AS p1,products AS p2
WHERE P1.vend_id=P2.vend_id
AND P2.prod_id = 'DTNTR';
</code></pre>
<p>3.自然联结，我们建立的每个内联结都是自然联结</p>
<p>4.外部联结，分 左外部联结 和 右外部联结 表名 LEFT/RIGHT OUNER JOIN 表名  ON  联结条件</p>
<pre><code>SELECT vend_name,prod_name,prod_price 
FROM vendors LEFT OUNER JOIN products ON 
vendors.vend_id = products.vend_id;

SELECT vend_name,prod_name,prod_price 
FROM vendors RIGHT OUNER JOIN products ON 
products.vend_id = vendors.vend_id;
</code></pre>
<h2 id="组合查询">组合查询</h2>
<p>任何具有多个WHERE子句的SELECT语句都可以作为一个组合查询给出<br>
1.可以用UNION操作符来组合查询,输出单个查询结果集</p>
<pre><code>SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price &lt;= 5
UNION
SELECT vend_id,prod_id,prod_priceFROM products WHERE vend_id IN (1001,1002);
</code></pre>
<p>注：1）UNION必须由两条或两条以上的SELECT语句组成，语句之间用UNION关键字分隔<br>
2）UNION每个查询必须包含相同的列、表达式或聚集函数<br>
3）列数据类型必须兼容</p>
<p>2.UNION会自动去除重复行，返回所有的匹配行使用UNION ALL</p>
<p>3.在用UNION组合查询时，只能使用一条ORDER BY子句，必须放在最后一条SELECT语句之后，将排序所有的SELECT生成的结果</p>
<pre><code>SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price &lt;= 5
UNION
SELECT vend_id,prod_id,prod_priceFROM products WHERE vend_id IN (1001,1002)
ORDER BY vend_id,prod_price;
</code></pre>
<h2 id="全文本搜索">全文本搜索</h2>
<p>百度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安装MYSQL 8.0.21 zip]]></title>
        <id>https://freecille.github.io/post/an-zhuang-mysql-8021-zip/</id>
        <link href="https://freecille.github.io/post/an-zhuang-mysql-8021-zip/">
        </link>
        <updated>2020-10-02T06:39:14.000Z</updated>
        <content type="html"><![CDATA[<p>MYSQL 8.0.21下载地址<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a><br>
1.选择 &quot;Windows (x86, 64-bit), ZIP Archive&quot;8.0.21版本，download<br>
2.将压缩包内容解压到想要安装的目录位置<br>
3.添加环境变量<br>
1）path添加：mysql安装目录下的bin文件夹地址。（这是一种不添加%MySQL_HOME%变量的方法）<br>
例如：&quot;D:\Program File(x86)\MySQL\mysql-8.0.21-winx64\bin&quot;</p>
<p>4.在&quot;D:\Program File(x86)\MySQL\mysql-8.0.21-winx64&quot;目录下，<br>
创建my.ini配置文件，配置文件内容如下：</p>
<pre><code>[mysqld]
# 设置3306端口
port=3306
# 设置mysql的安装目录
basedir=D:\Program Files\mysql-8.0.21-winx64
# 设置mysql数据库的数据的存放目录
datadir=D:\Program Files\mysql-8.0.21-winx64\Data
# 允许最大连接数
max_connections=200
# 允许连接失败的次数。
max_connect_errors=10
# 服务端使用的字符集默认为utf8mb4
character-set-server=utf8mb4
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
# 默认使用“mysql_native_password”插件认证
#mysql_native_password
default_authentication_plugin=mysql_native_password
[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4
[client]
# 设置mysql客户端连接服务端时默认使用的端口
port=3306
default-character-set=utf8mb4
</code></pre>
<p>5.管理员模式运行cmd<br>
进入&quot;D:\Program File(x86)\MySQL\mysql-8.0.21-winx64\bin&quot;目录下，<br>
执行命令<br>
mysqld --initialize --console</p>
<p>6.复制localhost后面的临时密码，之后会它用来改密码</p>
<p>7.安装MySQL服务<br>
mysqld --install</p>
<p>8.启动MYSQL服务<br>
net start mysql</p>
<p>9.修改密码<br>
1）下载Navicat<br>
新建连接，输入密码，测试连接是否成功，成功点击确定。<br>
双击刚刚建立的连接，会提示密码失效，这时候输入新密码即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://freecille.github.io/post/hello-gridea/</id>
        <link href="https://freecille.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>